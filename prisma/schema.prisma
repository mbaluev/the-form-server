datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Session {
  id String @id
  sid String @unique
  data String
  expiresAt DateTime
}

model Document {
  id String @id @default(uuid())
  name String
  description String?
  url String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // foreign keys
  documentTypeId String
  documentType DocumentType @relation(fields: [documentTypeId], references: [id])
  fileId String? @unique
  file File? @relation(fields: [fileId], references: [id])
  userId String
  user User @relation(fields: [userId], references: [id])

  // references
  material Material?
  task Task?
  userTaskDocument UserTaskDocument?
}
model DocumentType {
  id String @id @default(uuid())
  name String

  // references
  documents Document[]
}
model File {
  id String @id @default(uuid())
  name String
  size Int
  mimeType String
  path String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // references
  document Document?
}

model Module {
  id String @id @default(uuid())
  title String
  name String
  position Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // references
  blocks Block[]
  userModules UserModule[]
}
model Block {
  id String @id @default(uuid())
  title String
  name String
  position Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // foreign keys
  moduleId String
  module Module? @relation(fields: [moduleId], references: [id])

  // references
  materials Material[]
  tasks Task[]
  questions Question[]
  userBlocks UserBlock[]
}
model Material {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // foreign keys
  blockId String
  block Block? @relation(fields: [blockId], references: [id])
  documentId String @unique
  document Document? @relation(fields: [documentId], references: [id])

  // references
  userMaterials UserMaterial[]
}
model Task {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // foreign keys
  blockId String
  block Block? @relation(fields: [blockId], references: [id])
  documentId String @unique
  document Document? @relation(fields: [documentId], references: [id])

  // references
  userTasks UserTask[]
}
model Question {
  id String @id @default(uuid())
  title String
  position Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // foreign keys
  blockId String
  block Block? @relation(fields: [blockId], references: [id])

  // references
  questionOptions QuestionOption[]
  userQuestions UserQuestion[]
}
model QuestionOption {
  id String @id @default(uuid())
  title String
  correct Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // foreign keys
  questionId String
  question Question? @relation(fields: [questionId], references: [id])

  // references
  userQuestionAnswers UserQuestionAnswer[]
}

model User {
  id String @id @default(uuid())
  firstname String
  lastname String
  username String @unique
  password String
  salt String
  active Boolean @default(false)
  paid Boolean @default(false)
  admin Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // references
  userRefreshTokens UserRefreshToken[]
  userDocuments Document[]
  userModules UserModule[]
  userBlocks UserBlock[]
  userMaterials UserMaterial[]
  userTasks UserTask[]
  userTaskDocuments UserTaskDocument[]
  userQuestions UserQuestion[]
  userQuestionAnswers UserQuestionAnswer[]
}
model UserRefreshToken {
  id String @id @default(uuid())
  token String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // foreign keys
  userId String
  user User? @relation(fields: [userId], references: [id])
}
model UserModule {
  id String @id @default(uuid())
  enable Boolean @default(false)
  complete Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // foreign keys
  moduleId String
  module Module? @relation(fields: [moduleId], references: [id])
  userId String
  user User? @relation(fields: [userId], references: [id])

  // references
  userBlocks UserBlock[]
}
model UserBlock {
  id String @id @default(uuid())
  enable Boolean @default(false)
  complete Boolean @default(false)
  completeMaterials Boolean @default(false)
  completeQuestions Boolean @default(false)
  completeTasks Boolean @default(false)
  errorQuestions Boolean @default(false)
  commentQuestions Boolean @default(false)
  sentTasksAdmin Boolean?
  sentTasksUser Boolean?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // foreign keys
  blockId String
  block Block? @relation(fields: [blockId], references: [id])
  userId String
  user User? @relation(fields: [userId], references: [id])
  userModuleId String
  userModule UserModule? @relation(fields: [userModuleId], references: [id])

  // references
  userMaterials UserMaterial[]
  userTasks UserTask[]
  userQuestions UserQuestion[]
}
model UserMaterial {
  id String @id @default(uuid())
  complete Boolean?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // foreign keys
  materialId String
  material Material? @relation(fields: [materialId], references: [id])
  userId String
  user User? @relation(fields: [userId], references: [id])
  userBlockId String
  userBlock UserBlock? @relation(fields: [userBlockId], references: [id])
}
model UserTask {
  id String @id @default(uuid())
  complete Boolean?
  sent Boolean?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // foreign keys
  taskId String
  task Task? @relation(fields: [taskId], references: [id])
  userId String
  user User? @relation(fields: [userId], references: [id])
  userBlockId String
  userBlock UserBlock? @relation(fields: [userBlockId], references: [id])

  // references
  userTaskDocuments UserTaskDocument[]
}
model UserTaskDocument {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // foreign keys
  userId String
  user User? @relation(fields: [userId], references: [id])
  documentId String @unique
  document Document? @relation(fields: [documentId], references: [id])
  userTaskId String
  userTask UserTask? @relation(fields: [userTaskId], references: [id])
}
model UserQuestion {
  id String @id @default(uuid())
  complete Boolean?
  error Boolean?
  commentText String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // foreign keys
  questionId String
  question Question? @relation(fields: [questionId], references: [id])
  userId String
  user User? @relation(fields: [userId], references: [id])
  userBlockId String
  userBlock UserBlock? @relation(fields: [userBlockId], references: [id])

  // references
  userQuestionAnswers UserQuestionAnswer[]
}
model UserQuestionAnswer {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // foreign keys
  questionOptionId String @unique
  questionOption QuestionOption? @relation(fields: [questionOptionId], references: [id])
  userId String
  user User? @relation(fields: [userId], references: [id])
  userQuestionId String
  userQuestion UserQuestion @relation(fields: [userQuestionId], references: [id])
}
